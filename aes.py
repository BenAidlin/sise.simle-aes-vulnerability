def simple_aes_enc(message, key):
    # sub bytes
    state1 = S_BOX[message[0]]
    state2 = S_BOX[message[1]]
    # add round key
    state1 = state1 ^ key[0]
    state2 = state2 ^ key[1]
    return bytes([state1, state2])

def simple_aes_dec(cipher, key):
    # add round key
    state1 = cipher[0] ^ key[0]
    state2 = cipher[1] ^ key[1]
    # inv sub bytes
    state1 = INV_S_BOX[state1]
    state2 = INV_S_BOX[state2]
    return bytes([state1, state2])

def get_k2(message1, message2, cipher1, cipher2):
    # first_equation_left_side
    fels = S_BOX[message2[0]] ^ S_BOX[message1[0]]
    k21_true = None
    for k21 in range(256):
        # first_equation_right_side
        fers = INV_S_BOX[cipher2[0] ^ k21] ^ INV_S_BOX[cipher1[0] ^ k21]
        if fels != fers:
            continue
        k21_true = k21
        break
    # second equation left side
    sels =  S_BOX[message2[1]] ^ S_BOX[message1[1]]
    k22_true = None
    for k22 in range(256):
        # second equation right side
        sers = INV_S_BOX[cipher2[1] ^ k22] ^ INV_S_BOX[cipher1[1] ^ k22]
        if sels != sers:
            continue
        k22_true = k22
        break

    return (k21_true, k22_true)

def get_k1(message1, message2, cipher1, cipher2, k21, k22):
    k11 = INV_S_BOX[cipher1[0] ^ k21] ^ S_BOX[message1[0]]
    k12 = INV_S_BOX[cipher2[1] ^ k22] ^ S_BOX[message2[1]]
    return (k11, k12)
    

def get_keys(message1, message2, cipher1, cipher2):
    k21, k22 = get_k2(message1, message2, cipher1, cipher2)
    if k21 is None or k22 is None:
        return None # if this happens there were no keys fitting the bytes
    k11, k12 = get_k1(message1, message2, cipher1, cipher2, k21, k22)
    return bytes([k11, k12, k21, k22])

def encrypt_aes(args):
    message_path, key_path, output_path = args
    print("encrypting with " + message_path + " ," + key_path + " ," + output_path)
    # open files needed
    with open(message_path, "rb") as message_file, open(key_path, "rb") as keys_file, open(output_path, "wb") as out_file:
        message = message_file.read(MESSAGE_SIZE)    
        keys = keys_file.read(KEY_SIZE)
        first_key = keys[0:2]
        second_key = keys[2:4]
        # encrypt with double simple aes for every 16 bits
        while(message):
            out_file.write(simple_aes_enc(simple_aes_enc(message, first_key), second_key))
            message = message_file.read(MESSAGE_SIZE)

def decrypt_aes(args):
    cipher_text, key_path, output_path = args
    print("decrypting with " + cipher_text + " ," + key_path + " ," + output_path)
    with open(cipher_text, "rb") as cipher_file, open(key_path, "rb") as keys_file, open(output_path, "wb") as out_file:
        cipher = cipher_file.read(MESSAGE_SIZE)    
        keys = keys_file.read(KEY_SIZE)
        first_key = keys[0:2]
        second_key = keys[2:4]
        # decrypt with double simple aes for every 16 bits
        while(cipher):
            out_file.write(simple_aes_dec(simple_aes_dec(cipher, second_key), first_key))
            cipher = cipher_file.read(MESSAGE_SIZE)

def break_aes(args):
    message_path, cipher_text, key_path = args
    print("breaking with " + message_path + " ," + cipher_text + " ," + key_path)
    with open(message_path, "rb") as message_file, open(cipher_text, "rb") as cipher_file, open(key_path, "wb") as key_file:
        cipher1 = cipher_file.read(MESSAGE_SIZE)
        message1 = message_file.read(MESSAGE_SIZE)
        cipher2 = cipher_file.read(MESSAGE_SIZE)
        message2 = message_file.read(MESSAGE_SIZE)        
        keys = get_keys(message1, message2, cipher1, cipher2)
        if keys is not None:
            key_file.write(keys)

import sys

MESSAGE_SIZE = 2
KEY_SIZE = 4

switch_case = { # each flag mapped to (function, num of params, action in string)
    "-e" : (encrypt_aes, 3, "encrypting"),
    "-d" : (decrypt_aes, 3, "decrypting"),
    "-b" : (break_aes, 3, "breaking")
}

if len(sys.argv)<2 or sys.argv[1] not in switch_case.keys(): # check flag is valid
    print("please supply flag (-e, -d, -b)")
    exit()

func, param_len, method = switch_case[sys.argv[1]]

if len(sys.argv) < 2 + param_len: # check enough params
    print("please supply " + str(param_len) + " parameters for " + method + "...")
    exit()

S_BOX = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

INV_S_BOX = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

func(sys.argv[2:2+param_len]) # activate the function with the <param_len> arguments that follow the flag